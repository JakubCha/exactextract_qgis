# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ZonalExactDialog
                                 A QGIS plugin
 Zonal Statistics of rasters using Exact Extract library
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-02-11
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Jakub Charyton
        email                : jakub.charyton@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsMapLayerProxyModel

from osgeo import gdal

from .DialogInputDTO import DialogInputDTO

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'zonal_exact_dialog_base.ui'))


class ZonalExactDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(ZonalExactDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.dialog_input: DialogInputDTO = None
        
        self.setupUi(self)
        
        self.mRasterLayerComboBox.setFilters(QgsMapLayerProxyModel.RasterLayer)
        self.mVectorLayerComboBox.setFilters(QgsMapLayerProxyModel.VectorLayer)
        
        self.mPushButton.clicked.connect(self.calculate)

    def calculate(self):
        self.get_input_values()
        pass
    
    def get_input_values(self):
        raster_layer_path, vector_layer_path = self.get_files_paths()
        parallel_jobs = self.mSpinBox.value()
        output_file_path = self.mQgsOutputFileWidget.filePath()
        aggregates_stats_list = self.mAggregatesComboBox.checkedItems()
        arrays_stats_list = self.mArraysComboBox.checkedItems()
        
        self.dialog_input = DialogInputDTO(raster_layer_path, vector_layer_path, parallel_jobs, output_file_path,
                                           aggregates_stats_list, arrays_stats_list)
    
    def get_files_paths(self):
        raster_layer_path = self.mRasterLayerComboBox.currentLayer().dataProvider().dataSourceUri()
        vector_layer_path = self.mVectorLayerComboBox.currentLayer().dataProvider().dataSourceUri()

        return raster_layer_path, vector_layer_path
    
    
    