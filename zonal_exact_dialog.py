# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ZonalExactDialog
                                 A QGIS plugin
 Zonal Statistics of rasters using Exact Extract library
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-02-11
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Jakub Charyton
        email                : jakub.charyton@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from typing import List
from pathlib import Path

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtCore import QVariant
from qgis.core import (QgsMapLayerProxyModel, QgsTask, QgsApplication, QgsTaskManager, QgsMessageLog, QgsVectorLayer, QgsField,
                    QgsExpressionContext, QgsExpression, QgsExpressionContextUtils, edit)

import geopandas as gpd
import pandas as pd

from .dialog_input_dto import DialogInputDTO
from .user_communication import UserCommunication, WidgetPlainTextWriter
from .task_classes import CalculateStatsTask, PostprocessStatsTask

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'zonal_exact_dialog_base.ui'))


class ZonalExactDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None, uc: UserCommunication = None, iface = None, project = None, task_manager: QgsTaskManager = None):
        """Constructor."""
        super(ZonalExactDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        # Initiate  a new instance of the dialog input DTO class to hold all input data
        self.dialog_input: DialogInputDTO = None
        # Initiate an empty list for storing tasks in queue
        self.tasks = []
        # Initiate an empty list to store intermediate results of zonal statistics calculation
        self.intermediate_result_list = []
        # Initiate main task that will hold aggregated data from child calculating tasks
        self.postprocess_task: PostprocessStatsTask = None
        self.input_gdf: gpd.GeoDataFrame = None
        self.calculated_stats_list = []
        self.temp_index_field = None
        # assign qgis internal variables to class variables
        self.uc = uc
        self.iface = iface
        self.project = project
        self.task_manager: QgsTaskManager = task_manager
        
        self.setupUi(self)
        
        self.widget_console = WidgetPlainTextWriter(self.mPlainText)
        
        # controls whether output file is virtual or saved on disk
        self.flag_virtual = False
        self.mVirtualCheckBox.setChecked(self.flag_virtual)
        self.mQgsOutputFileWidget.setFileWidgetButtonVisible(not self.flag_virtual)
        self.mQgsOutputFileWidget.setReadOnly(self.flag_virtual)
        self.mVirtualCheckBox.clicked.connect(self.toggle_virtual)
        # set filters on combo boxes to get correct layer types
        self.mRasterLayerComboBox.setFilters(QgsMapLayerProxyModel.RasterLayer)
        self.mVectorLayerComboBox.setFilters(QgsMapLayerProxyModel.VectorLayer)
        
        self.mCalculateButton.clicked.connect(self.calculate)

    def calculate(self):
        self.mCalculateButton.setEnabled(False)
        try:
            self.get_input_values()  # loads input values from the dialog into self.dialog_input
            if self.dialog_input is None:
                self.mCalculateButton.setEnabled(True)
                return
            self.input_vector = self.dialog_input.vector_layer
            
            #TODO: add option to choose id from the layer instead of creating temporary every time
            # create a temporary index field
            self.temp_index_field = 'temp_index'
            self.generate_temporary_id(self.input_vector, self.temp_index_field)
            
            batch_size = round(self.input_vector.featureCount() / self.dialog_input.parallel_jobs)
            # calculate using QgsTask and exactextract
            self.process_calculations(self.input_vector, batch_size)
            # wait for calculations to finish to continue
            if self.postprocess_task is not None:
                self.postprocess_task.taskCompleted.connect(self.save_result)
        except Exception as exc:
            QgsMessageLog.logMessage(f'ERROR: {exc}')
            self.widget_console.write_error(exc)
        finally:
            self.mCalculateButton.setEnabled(True)
            
    def process_calculations(self, vector_gdf, batch_size):
        self.intermediate_result_list = []
        self.postprocess_task = PostprocessStatsTask(f'Zonal ExactExtract task', QgsTask.CanCancel, widget_console=self.widget_console,
                                                    result_list=self.intermediate_result_list,
                                                    index_column=self.temp_index_field, index_column_dtype=self.input_gdf[self.temp_index_field].dtype, 
                                                    prefix=self.dialog_input.prefix)
        self.postprocess_task.taskCompleted.connect(self.update_progress_bar)
        
        self.tasks = []
        for i in range(0, self.input_gdf.shape[0], batch_size):
            temp_vector_gdf = vector_gdf[i:i + batch_size]

            calculation_subtask = CalculateStatsTask(f'calculation subtask {i}', flags=QgsTask.Silent, result_list=self.intermediate_result_list,
                                                    widget_console=self.widget_console,
                                                    polygon_layer_gdf=temp_vector_gdf, raster=self.dialog_input.raster_layer_path,
                                                    stats=self.dialog_input.aggregates_stats_list+self.dialog_input.arrays_stats_list,
                                                    include_cols=[self.temp_index_field])
            calculation_subtask.taskCompleted.connect(self.update_progress_bar)
            self.tasks.append(calculation_subtask)
            self.postprocess_task.addSubTask(calculation_subtask, [], QgsTask.ParentDependsOnSubTask)

        self.task_manager.addTask(self.postprocess_task)
        
    def save_result(self):
        calculated_stats_df = self.postprocess_task.calculated_stats
        QgsMessageLog.logMessage(f'Zonal ExactExtract task result shape: {str(calculated_stats_df.shape)}')
        self.widget_console.write_info(f'Zonal ExactExtract task result shape: {str(calculated_stats_df.shape)}')
        
        try:
            polygon_layer_stats_gdf = pd.merge(self.input_gdf, calculated_stats_df, on=self.temp_index_field, how='left')
            if self.flag_virtual:
                virtual_layer = QgsVectorLayer(polygon_layer_stats_gdf.to_json(),"result_zonal_layer","memory")
                self.project.addMapLayer(virtual_layer)
            else:
                polygon_layer_stats_gdf.to_file(self.dialog_input.output_file_path, engine='pyogrio')
                # Create a QgsVectorLayer instance for the GeoPackage
                output_project_layer = QgsVectorLayer(self.dialog_input.output_file_path, Path(self.dialog_input.output_file_path).stem, 'ogr')

                # Check if the layer was loaded successfully
                if not output_project_layer.isValid():
                    QgsMessageLog.logMessage(f'Unable to load layer from {self.dialog_input.output_file_path}')
                    self.widget_console.write_error(f'Unable to load layer from {self.dialog_input.output_file_path}')
                else:
                    self.widget_console.write_info('Finished calculating statistics')
                    # Add the layer to the project
                    self.project.addMapLayer(output_project_layer)
                    
        except Exception as exc:
            QgsMessageLog.logMessage(f'ERROR: {exc}')
            self.widget_console.write_error(exc)
        finally:
            self.clean()
            self.mCalculateButton.setEnabled(True)

    def update_progress_bar(self):
        # calculate progress change as percentage of total tasks completed + parent task
        progress_change = int((1 / (len(self.tasks) + 1)) * 100)
        self.mProgressBar.setValue(self.mProgressBar.value() + progress_change)
        
    def clean(self):
        # reinitialize object values to free memory after calculation is done
        self.dialog_input: DialogInputDTO = None
        self.tasks = []
        self.intermediate_result_list = []
        self.postprocess_task: PostprocessStatsTask = None
        self.input_gdf: gpd.GeoDataFrame = None
        self.calculated_stats_list = []
        
        self.mProgressBar.setValue(0)
        
    def get_input_values(self):
        raster_layer_path: str = self.mRasterLayerComboBox.currentLayer().dataProvider().dataSourceUri()
        vector_layer: QgsVectorLayer = self.mVectorLayerComboBox.currentLayer()
        parallel_jobs: int = self.mSpinBox.value()
        output_file_path: str = self.mQgsOutputFileWidget.filePath()
        aggregates_stats_list: List[str] = self.mAggregatesComboBox.checkedItems()
        arrays_stats_list: List[str] = self.mArraysComboBox.checkedItems()
        prefix: str = self.mPrefixEdit.text()
        
        if not raster_layer_path or not vector_layer:
            self.uc.bar_warn(f"You didn't select raster layer or vector layer")
            return
        if not self.flag_virtual and not output_file_path:
            self.uc.bar_warn(f"You didn't select output file path")
            return
        # check if both stats lists are empty
        if not aggregates_stats_list and not arrays_stats_list:
            self.uc.bar_warn(f"You didn't select anything from either Aggregates and Arrays")
            return
        
        self.dialog_input = DialogInputDTO(raster_layer_path=raster_layer_path, vector_layer=vector_layer, parallel_jobs=parallel_jobs, 
                                        output_file_path=output_file_path, aggregates_stats_list=aggregates_stats_list, arrays_stats_list=arrays_stats_list,
                                        prefix=prefix)
    
    def generate_temporary_id(self, layer: QgsVectorLayer, field_name: str = 'temp_index'):
        # Add a new field for the unique IDs
        field_index = layer.fields().indexFromName(field_name)
        
        if field_index == -1:
            # Add a new field if it doesn't exist
            layer.dataProvider().addAttributes([QgsField(field_name, QVariant.Int)])
            layer.updateFields()
        
        # Generate unique IDs and update the attribute table
        with edit(layer):
            for feature in layer.getFeatures():
                layer.changeAttributeValue(feature.id(), field_index, feature.id())
        layer.commitChanges()
                    
    def toggle_virtual(self):
        self.flag_virtual = not self.flag_virtual
        self.mVirtualCheckBox.setChecked(self.flag_virtual)
        self.mQgsOutputFileWidget.setFileWidgetButtonVisible(not self.flag_virtual)
        self.mQgsOutputFileWidget.setReadOnly(self.flag_virtual)

